// File: server.js
const express = require('express');
const axios = require('axios');
const app = express();
const port = 5502; // Match your current port

// In-memory cache
const cache = new Map();

const accessToken = 'f42cdcdd9126434f6b33432ae79d02cad2c7b1de38b5d5a68d7d1f5d2e993fcd';

// Middleware to log all requests
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// Serve static files from public directory
app.use(express.static('public'));

// API endpoint for shots
app.get('/api/shots', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const perPage = 30;

    console.log(`Processing request for page ${page}`);

    // Check cache
    const cacheKey = `shots-page-${page}`;
    if (cache.has(cacheKey)) {
      console.log(`Serving from cache: ${cacheKey}`);
      return res.json(cache.get(cacheKey));
    }

    console.log('Making request to Dribbble API...');
    const response = await axios.get('https://api.dribbble.com/v2/user/shots', {
      headers: {
        Authorization: `Bearer ${accessToken}`
      },
      params: {
        page: page,
        per_page: perPage
      }
    });

    console.log(`Dribbble API response status: ${response.status}`);
    console.log('Response data:', JSON.stringify(response.data).substring(0, 200) + '...');

    if (!response.data || !Array.isArray(response.data)) {
      console.error('Unexpected response format:', response.data);
      return res.status(500).json({ 
        error: 'Invalid response from Dribbble API',
        details: 'Expected an array of shots' 
      });
    }

    const shots = response.data;
    const hasMore = shots.length === perPage;

    const data = {
      shots: shots,
      hasMore: hasMore
    };

    cache.set(cacheKey, data);
    console.log(`Cached: ${cacheKey}`);

    res.json(data);
  } catch (error) {
    console.error('Error fetching shots:', error.message);
    
    // Provide more detailed error information
    let errorDe 
    tails = {
      message: error.message
    };
    
    if (error.response) {
      console.error('Dribbble API response:', error.response.status, error.response.data);
      errorDetails.status = error.response.status;
      errorDetails.data = error.response.data;
    }
    
    res.status(500).json({ 
      error: 'Error fetching shots', 
      details: errorDetails 
    });
  }
});

// Handle all other routes by serving index.html
app.get('*', (req, res) => {
  res.sendFile('index.html', { root: 'public' });
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});